/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*      https://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.apache.commons.jelly.tags.jaxme;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.apache.commons.jelly.JellyTagException;
import org.apache.commons.jelly.MissingAttributeException;
import org.apache.commons.jelly.TagSupport;
import org.apache.commons.jelly.XMLOutput;

/**
 * <p>Marshalls a generated object generated by a JAXB implementation into xml.</p>
 * <p>
 * The result is placed into the processed content for further processing by enclosing
 * tags.</p>
 */
public class MarshallTag extends TagSupport {

    private String packages;
    private Object object;

    @Override
    public void doTag(final XMLOutput output) throws MissingAttributeException, JellyTagException {
        if (packages == null) {
            throw new MissingAttributeException( "packages" );
        }
        if (object == null) {
            throw new MissingAttributeException( "object" );
        }
        try {

            final JAXBContext jaxbContext = JAXBContext.newInstance(packages);
            final Marshaller marshaller = jaxbContext.createMarshaller();
            marshaller.marshal(object, output);

        } catch (final JAXBException ex)  {
            throw new JellyTagException(ex);
        }
    }

    public Object getObject() {
        return object;
    }

    public String getPackages() {
        return packages;
    }

    /**
     * Defines the object to be unmarshalled into XML by specifying a jelly variable name.
     */
    public void setObject(final Object object) {
        this.object = object;
    }

    /**
     * Defines the generated objects which will be marshalled by specifying the package name.
     */
    public void setPackages(final String packages) {
        this.packages = packages;
    }
}
